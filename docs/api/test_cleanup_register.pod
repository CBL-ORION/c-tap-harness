=for stopwords
Allbery typedef

=head1 NAME

test_cleanup_register - Register a function to run at the end of a TAP test

=head1 SYNOPSIS

#include <tap/basic.h>

typedef void (*B<test_cleanup_func>)(int);

void B<test_cleanup_register>(test_cleanup_func I<func>);

=head1 DESCRIPTION

test_cleanup_register() registers a cleanup function that is called when
testing ends.  All such registered functions will be run during atexit
handling (and are therefore subject to all the same constraints and
caveats as atexit functions).  The function must return void and will be
passed one argument, an int that will be true if the test completed
successfully and false otherwise.  Typical uses of cleanup functions
include removing temporary files, cleaning up temporary resources, or
deciding whether to preserve log files based on whether the test
succeeded.

test_cleanup_register() may be called at any point in the program before
its exit, but either plan() or plan_lazy() must be called before the
program exits or cleanup functions will not be run.  Provided that plan()
or plan_lazy() has been called, the cleanup functions will be called even
if the test aborts with bail().

The registered cleanup functions check whether they are running in the
same process (as checked with getpid()) as plan() or plan_lazy() was
called in.  If not, cleanup functions will not be run.  In other words,
the cleanup functions are per-test, not per-process, and will not be run
in child processes.

test_cleanup_register() may be called as many times as desired.  All
registered functions will be called (provided that none of them terminate
the process prematurely) in the order in which they were registered.

=head1 RETURN VALUE

None.

=head1 BUGS

If all planned tests succeed, or if lazy planning is used and all tests
have passed so far, the cleanup functions will be passed a true argument
even if the test is aborting with bail().

=head1 CAVEATS

Cleanup functions registered with test_cleanup_register() cannot be used
to clean up after actions taken before a call to skip_all(), since calling
skip_all() means that plan() and plan_lazy() were never called.

=head1 AUTHOR

Russ Allbery <eagle@eyrie.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2011, 2013 Russ Allbery <eagle@eyrie.org>

Copying and distribution of this file, with or without modification, are
permitted in any medium without royalty provided the copyright notice and
this notice are preserved.  This file is offered as-is, without any
warranty.

=head1 SEE ALSO

plan(3), skip_all(3)

The current version of the C TAP Harness library is available from its web
page at L<http://www.eyrie.org/~eagle/software/c-tap-harness/>.

=cut
